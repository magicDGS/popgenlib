// Dependencies for the buildscript (not the program)
buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "java"
    // id "jacoco"
}

apply from: 'gradle/jacoco.coverage.gradle'

group = 'org.magicdgs'
version = '0.1.0-SNAPSHOT'
description = """Population/Pool Analysis ToolKit"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
	compile "org.slf4j:slf4j-api:1.7.23"
    compile "com.google.guava:guava:21.0"
    compile "org.apache.commons:commons-math3:3.6.1"

	testCompile "org.testng:testng:6.10"
    // benchmarking
    testCompile "org.openjdk.jmh:jmh-core:1.18"
    testCompile "org.openjdk.jmh:jmh-generator-annprocess:1.18"
}

// for managing the wrapper task
task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

// test task
tasks.withType(Test) {

    // tests could be always re-run
    outputs.upToDateWhen { false }

    useTestNG()

    // show the stdout/stderr of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    minHeapSize = "1G"
    maxHeapSize = "2G"

    // log the test that is running
    beforeTest { descriptor ->
        logger.lifecycle("Running Test: " +  descriptor)
    }

    // listen to standarrd out and standard error of the test JVM(s)
    def testOutput = ""
    onOutput { descriptor, event ->
        logger.lifecycle("Test: " + descriptor + " standard out/err -> " + event.message)
    }

    // logging after the tests
    testLogging {
        testLogging {
            events "skipped", "failed"
            exceptionFormat = "full"
        }
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
            }
        }
    }
}